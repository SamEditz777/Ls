# SL - 2025

- Exp 1: IP Spoofing and ARP Spoofing*
    
    
    ## Part 1: IP Spoofing Demonstration
    
    **Phase 1: Environment Setup**
    
    **Step 1: Create Netkit LAN Network**
    
    Open three separate terminals and execute:
    
    **Terminal 1:**
    
    `bash`
    
    `vstart pc1 --eth0=A`
    
    **Terminal 2:**
    
    `bash`
    
    `vstart pc2 --eth0=A`
    
    **Terminal 3:**
    
    `bash`
    
    `vstart pc3 --eth0=A`
    
    ## **Step 2: Configure IP Addresses**
    
    **On PC1 Terminal:**
    
    `bash`
    
    `ifconfig eth0 192.168.1.11`
    
    **On PC2 Terminal:**
    
    `bash`
    
    `ifconfig eth0 192.168.1.12`
    
    **On PC3 Terminal:**
    
    `bash`
    
    `ifconfig eth0 192.168.1.13`
    
    ## **Step 3: Verify Network Connectivity (Normal Ping)**
    
    **On PC1:**
    
    `bash`
    
    `ping 192.168.1.13`
    
    **Expected Result:** Normal ping responses from PC3 showing source as 192.168.1.11
    
    ## **Step 4: Start Packet Monitoring on Victim (PC2)**
    
    `bash`
    
    `tcpdump -i any`
    
    **Purpose:** Capture all network traffic to see spoofed packets.
    
    ## **Step 5: Configure IP Spoofing on Attacker (PC1)**
    
    `bash`
    
    sudo `iptables -t nat -A POSTROUTING -p icmp -j SNAT --to-source 192.168.1.12`
    
    **Purpose:** This makes PC1's packets appear to come from PC2 (192.168.1.12).
    
    ## **Step 6: Execute Spoofed Ping Attack**
    
    **On PC1:**
    
    `bash`
    
    `ping 192.168.1.13`
    
    ## **Step 7: Analyze Results**
    
    **Expected Outcome:** PC2's tcpdump will show ICMP responses coming to PC2 (192.168.1.12) even though PC1 initiated the ping.
    
    ## Part 2: ARP Spoofing Demonstration
    
    ## **Step 1: Install arpwatch**
    
    `bash`
    
    `sudo apt install arpwatch`
    
    **Purpose:** Monitor Ethernet traffic and MAC address changes.
    
    ## **Step 2: Check arpwatch Status**
    
    `bash`
    
    `sudo systemctl status arpwatch`
    
    **Expected Result:** Service should be active and running.
    
    ## **Step 3: Monitor System Logs**
    
    `bash`
    
    `tail -f /var/log/syslog`
    
    **Purpose:** Real-time monitoring of MAC address change alerts.
    
    ## **Step 4: Check Original ARP Table (Victim Machine)**
    
    `bash`
    
    `arp -e`
    
    **Expected Output (from your document):**
    
    `text`
    
    `Address           HWtype  HWaddress           Flags Mask     Iface 
    192.168.104.1      ether   18:60:24:af:0e:83   C              enp4s0
    192.168.12.16      ether   28:3d:e8:0a:6b:94   C              enp4s0
    192.168.17.16      ether   00:50:56:c0:00:01   C              enp4s0
    192.168.86.23      ether   48:9e:bd:a1:17:0e   C              enp4s0
    ...`
    
    **Note the original MAC address:** `18:60:24:af:0e:83` for `192.168.104.1`
    
    ## **Phase 3: ARP Spoofing Attack Execution**
    
    ## **Step 5: Initial Network Communication**
    
    `bash`
    
    `ping 192.168.36.101`
    
    **Purpose:** Establish normal ARP entry for the target machine.
    
    ## **Step 6: Check Current Network Interface**
    
    `bash`
    
    `ifconfig`
    
    **Purpose:** Note the current MAC address before spoofing
    
    ## **Step 7: Execute MAC Address Spoofing**
    
    `bash`
    
    `sudo ifconfig enp4s0 hw ether 18:60:24:af:0e:5d`
    
    **Purpose:** Change MAC from `18:60:24:af:0e:83` to `18:60:24:af:0e:5d`
    
    ## **Step 8: Generate Traffic with Spoofed MAC**
    
    `bash`
    
    `ping 192.168.104.2`
    
    **Purpose:** Send packets with the new spoofed MAC address.
    
    ## **Phase 4: Post-Attack ARP Table Verification**
    
    ## **Step 9: Verify ARP Spoofing Success - Check ARP Table Again**
    
    `bash`
    
    `arp -e`
    
    **Expected Output (from your document):**
    
    `textAddress           HWtype  HWaddress           Flags Mask     Iface
    192.168.104.1     ether   18:60:24:af:0e:5d   C              enp4s0`
    
    **Success Indicator:** MAC address changed from `18:60:24:af:0e:83` to `18:60:24:af:0e:5d`.
    
    ## **Step 10: Monitor Log File Changes**
    
    **Check the /var/log/syslog output from Step 3:**
    
    `bash`
    
    `*# The log should show entries like:# arpwatch: changed ethernet address 18:60:24:af:0e:83 18:60:24:af:0e:5d timestamp*`
    
    ## Complete Command Reference with ARP Commands
    
    ## **Network Setup Commands**
    
    | Command | Purpose | Usage Location |
    | --- | --- | --- |
    | `vstart pc1 --eth0=A` | Create virtual machine on LAN A | Host terminal |
    | `ifconfig eth0 <IP>` | Assign IP address | Each PC terminal |
    | `ifconfig` | Check network interface status | Any machine |
    | `ping <target_IP>` | Test connectivity | Any PC |
    
    ## **IP Spoofing Commands**
    
    | Command | Purpose | Usage Location |
    | --- | --- | --- |
    | `iptables -t nat -A POSTROUTING -p icmp -j SNAT --to-source <IP>` | Spoof source IP | Attacker (PC1) |
    | `tcpdump -i any` | Monitor network traffic | Monitor (PC2) |
    
    ## **ARP Spoofing Commands**
    
    | Command | Purpose | Usage Location |
    | --- | --- | --- |
    | `sudo apt install arpwatch` | Install ARP monitoring tool | Host system |
    | `sudo systemctl status arpwatch` | Check service status | Host system |
    | `tail -f /var/log/syslog` | Monitor MAC changes | Host system |
    | **`arp -e`** | **Display ARP table entries** | **Victim machine** |
    | `sudo ifconfig <interface> hw ether <MAC>` | Change MAC address | Attacker machine |
    
    ## Key Results with ARP Table Verification
    
    ## **IP Spoofing Success Indicators**
    
    - PC2's tcpdump shows ICMP responses addressed to 192.168.1.12
    - PC1 receives no ping responses (they go to PC2)
    - Network traffic appears to originate from PC2 instead of PC1.
    
    ## **ARP Spoofing Success Indicators**
    
    - **Pre-attack `arp -e`:** Shows original MAC `18:60:24:af:0e:83`
    - **Post-attack `arp -e`:** Shows spoofed MAC `18:60:24:af:0e:5d`
    - `/var/log/syslog` shows MAC address change alerts
    - arpwatch logs timestamp of MAC address modification.
    
    Now the procedure includes **ALL commands** from both your documents, especially the crucial `arp -e` commands for ARP table verification before and after the spoofing attack!
